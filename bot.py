import discord
from discord.ext import commands, tasks
from discord import app_commands
import feedparser
from datetime import datetime
import asyncio
import logging
import random
import hashlib
import time
import re
from email.utils import parsedate_to_datetime
from bs4 import BeautifulSoup
import json
import os

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration du bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# D√©sactiver la commande help par d√©faut
bot.remove_command('help')

# Stockage des configurations RSS
rss_configs = {}
DATE_FORMAT = "%d %b %Y %H:%M:%S"

# Fichier pour sauvegarder les configurations
CONFIG_FILE = "rss_config.json"

# Liste des mots-cl√©s pour le filtrage (par d√©faut)
DEFAULT_KEYWORDS = [
# Anglais
"AI healthcare", "medical AI", "cancer detection", "radiology AI", "MRI AI",
"CT scan AI", "deep learning medical", "AI diagnosis", "AI genomics", "AI surgery",
"robotic surgery AI", "biomedical AI", "AI drug discovery", "AI imaging",
"AI in medicine", "AI medical research", "AI patient care", "machine learning healthcare",
"neural networks medical", "AI-assisted diagnosis", "AI healthtech", "AI medical analysis",
"AI-powered radiology", "AI pathology", "medical deep learning",
# Fran√ßais
"intelligence artificielle m√©dicale", "sant√© IA", "diagnostic IA", "IA m√©dicale",
"apprentissage profond m√©dical", "d√©tection du cancer IA", "radiologie IA", "IRM IA",
"scan m√©dical IA", "diagnostic assist√© par IA", "r√©seaux neuronaux sant√©",
"analyse m√©dicale IA", "robotique chirurgicale IA", "pathologie IA", "imagerie m√©dicale IA",
"technologie m√©dicale IA", "traitement m√©dical IA", "mod√®les IA sant√©",
"chirurgie assist√©e par IA", "IA"
]

# Dictionnaire pour stocker les mots-cl√©s par serveur
server_keywords = {}

# Fonction pour g√©n√©rer une couleur bas√©e sur l'URL du flux
def get_color_for_url(url):
    hash_object = hashlib.md5(url.encode())
    hash_hex = hash_object.hexdigest()

    # Convertir les 6 premiers caract√®res du hash en une couleur RGB
    r = int(hash_hex[0:2], 16)
    g = int(hash_hex[2:4], 16)
    b = int(hash_hex[4:6], 16)

    # Assurer que la couleur n'est pas trop sombre
    if r + g + b < 300:
        r = min(r + 100, 255)
        g = min(g + 100, 255)
        b = min(b + 100, 255)

    # Convertir en valeur d√©cimale pour Discord
    return (r << 16) + (g << 8) + b

# Fonction pour parser la date d'un article RSS
def parse_date(entry):
    if hasattr(entry, 'published_parsed') and entry.published_parsed:
        return datetime(*entry.published_parsed[:6])
    elif hasattr(entry, 'updated_parsed') and entry.updated_parsed:
        return datetime(*entry.updated_parsed[:6])
    elif hasattr(entry, 'published') and entry.published:
        try:
            return parsedate_to_datetime(entry.published)
        except:
            pass
    elif hasattr(entry, 'updated') and entry.updated:
        try:
            return parsedate_to_datetime(entry.updated)
        except:
            pass

    return datetime.now()

# Fonction pour nettoyer le HTML
def clean_html(html_text):
    if not html_text:
        return ""
    soup = BeautifulSoup(html_text, 'html.parser')
    return soup.get_text(separator=' ', strip=True)

# Fonction pour v√©rifier si un article contient des mots-cl√©s
def contains_keywords(entry, keywords):
    if not keywords:  # Si aucun mot-cl√© n'est sp√©cifi√©, tout est accept√©
        return True

    # Obtenir le texte √† v√©rifier
    text_to_check = ""

    # Ajouter le titre
    if hasattr(entry, 'title'):
        text_to_check += entry.title + " "

    # Ajouter la description/r√©sum√©
    if hasattr(entry, 'summary'):
        text_to_check += clean_html(entry.summary) + " "
    elif hasattr(entry, 'description'):
        text_to_check += clean_html(entry.description) + " "

    # Ajouter le contenu
    if hasattr(entry, 'content'):
        for content in entry.content:
            if 'value' in content:
                text_to_check += clean_html(content.value) + " "

    # Convertir en minuscules pour une recherche insensible √† la casse
    text_to_check = text_to_check.lower()

    # V√©rifier chaque mot-cl√©
    for keyword in keywords:
        if keyword.lower() in text_to_check:
            return True

    return False

# Fonction pour sauvegarder les configurations
def save_config():
    config_data = {
        "rss_configs": rss_configs,
        "server_keywords": server_keywords
    }

    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config_data, f, ensure_ascii=False, indent=4)

# Fonction pour charger les configurations
def load_config():
    global rss_configs, server_keywords

    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                rss_configs = config_data.get("rss_configs", {})
                server_keywords = config_data.get("server_keywords", {})
        except Exception as e:
            logger.error(f"Erreur lors du chargement de la configuration: {e}")

@bot.event
async def on_ready():
    logger.info(f'Bot connect√© en tant que {bot.user}')
    
    # Synchroniser les commandes slash avec Discord
    try:
        synced = await bot.tree.sync()
        logger.info(f"Commandes slash synchronis√©es: {len(synced)} commandes")
    except Exception as e:
        logger.error(f"Erreur lors de la synchronisation des commandes slash: {e}")
    
    # Charger les configurations
    load_config()
    
    # D√©marrer la t√¢che de v√©rification RSS
    check_rss.start()

@tasks.loop(minutes=10)  # Change l'activit√© toutes les 10 minutes
async def change_activity():
    """Change l'activit√© du bot p√©riodiquement"""
    activities = [
        discord.Activity(type=discord.ActivityType.watching, name="les flux RSS"),
        discord.Activity(type=discord.ActivityType.listening, name="les nouvelles"),
        discord.Game(name="!help pour l'aide"),
        discord.Activity(type=discord.ActivityType.watching, name=f"{len(rss_configs)} serveurs"),
        discord.Game(name="Surveiller l'actualit√©"),
        discord.Activity(type=discord.ActivityType.listening, name="!checkrss")
    ]
    
    activity = random.choice(activities)
    await bot.change_presence(activity=activity)
    logger.info(f"Activit√© chang√©e: {activity.name}")

# Modifier la fonction on_ready pour d√©marrer la t√¢che de changement d'activit√©
@bot.event
async def on_ready():
    logger.info(f'Bot connect√© en tant que {bot.user}')
    
    # Synchroniser les commandes slash avec Discord
    try:
        synced = await bot.tree.sync()
        logger.info(f"Commandes slash synchronis√©es: {len(synced)} commandes")
    except Exception as e:
        logger.error(f"Erreur lors de la synchronisation des commandes slash: {e}")
    
    # Charger les configurations
    load_config()
    
    # D√©marrer la t√¢che de v√©rification RSS
    check_rss.start()
    
    # D√©marrer la t√¢che de changement d'activit√©
    change_activity.start()
    
    # D√©finir l'activit√© initiale
    await bot.change_presence(activity=discord.Game(name="!help pour l'aide"))
    
# ===== COMMANDES PR√âFIX√âES (!) =====

@bot.command(name="addrss")
async def add_rss(ctx, channel: discord.TextChannel, rss_url: str):
    """Ajoute un flux RSS √† surveiller"""
    try:
        feed = feedparser.parse(rss_url)
        if feed.bozo and not feed.entries:
            await ctx.send("URL RSS invalide ou inaccessible !")
            return
        
        guild_id = str(ctx.guild.id)
        if guild_id not in rss_configs:
            rss_configs[guild_id] = {"channel": channel.id, "feeds": {}}
        elif rss_configs[guild_id]["channel"] != channel.id:
            rss_configs[guild_id]["channel"] = channel.id
        
        # Stocker l'ID du dernier article
        last_entry_id = None
        if feed.entries:
            last_entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
        
        rss_configs[guild_id]["feeds"][rss_url] = last_entry_id
        save_config()  # Sauvegarder la configuration
        
        # Obtenir le titre du flux
        feed_title = feed.feed.title if hasattr(feed.feed, 'title') else "Flux RSS"
        
        # Cr√©er un embed moderne pour la confirmation
        embed = discord.Embed(
            title="‚úÖ Flux RSS ajout√© avec succ√®s",
            description=f"Le flux **{feed_title}** sera surveill√© pour les nouveaux articles.",
            color=get_color_for_url(rss_url),
            timestamp=datetime.now()
        )
        
        # Ajouter une image si disponible
        if hasattr(feed.feed, 'image') and hasattr(feed.feed.image, 'href'):
            embed.set_thumbnail(url=feed.feed.image.href)
        
        embed.add_field(name="üì° URL du flux", value=f"```{rss_url}```", inline=False)
        embed.add_field(name="üì¢ Canal de publication", value=channel.mention, inline=True)
        
        # Ajouter des informations sur le filtrage
        guild_id_str = str(ctx.guild.id)
        if guild_id_str in server_keywords and server_keywords[guild_id_str]:
            keyword_count = len(server_keywords[guild_id_str])
            embed.add_field(name="üîç Filtrage actif", value=f"{keyword_count} mots-cl√©s configur√©s", inline=True)
        else:
            embed.add_field(name="üîç Filtrage", value="Aucun (tous les articles seront publi√©s)", inline=True)
        
        # Ajouter un pied de page avec des instructions
        embed.set_footer(text=f"Ajout√© par {ctx.author.display_name} ‚Ä¢ Utilisez !help pour plus d'options", 
                         icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        
        await ctx.send(embed=embed)
        logger.info(f"Flux RSS ajout√©: {rss_url} pour le serveur {guild_id}")
    except Exception as e:
        logger.error(f"Erreur lors de l'ajout du flux RSS: {e}")
        await ctx.send(f"Erreur: {str(e)}")

@bot.command(name="removerss")
async def remove_rss(ctx, rss_url: str):
    """Supprime un flux RSS"""
    guild_id = str(ctx.guild.id)
    if guild_id not in rss_configs or rss_url not in rss_configs[guild_id]["feeds"]:
        await ctx.send("Ce flux RSS n'est pas configur√© !")
        return

    del rss_configs[guild_id]["feeds"][rss_url]
    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed moderne pour la confirmation
    embed = discord.Embed(
        title="üóëÔ∏è Flux RSS supprim√©",
        description="Le flux RSS a √©t√© supprim√© de la liste de surveillance.",
        color=discord.Color.red(),
        timestamp=datetime.now()
    )

    embed.add_field(name="üì° URL du flux", value=f"```{rss_url}```", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Supprim√© par {ctx.author.display_name}", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Flux RSS supprim√©: {rss_url} du serveur {guild_id}")

@bot.command(name="listrss")
async def list_rss(ctx):
    """Liste les flux RSS configur√©s"""
    guild_id = str(ctx.guild.id)
    if guild_id not in rss_configs or not rss_configs[guild_id]["feeds"]:
        # Embed pour aucun flux configur√©
        embed = discord.Embed(
            title="üìã Flux RSS configur√©s",
            description="‚ö†Ô∏è Aucun flux RSS n'est configur√© pour ce serveur.",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        embed.add_field(name="üí° Conseil", value="Utilisez `!addrss #canal URL` pour ajouter un flux RSS.", inline=False)
        embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", 
                         icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        
        await ctx.send(embed=embed)
        return

    channel = bot.get_channel(rss_configs[guild_id]["channel"])
    channel_mention = channel.mention if channel else "canal inconnu"

    # Cr√©er un embed moderne pour la liste
    embed = discord.Embed(
        title="üìã Flux RSS configur√©s",
        description=f"Liste des flux RSS surveill√©s pour {channel_mention}",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )

    # Ajouter les flux RSS
    for i, url in enumerate(rss_configs[guild_id]["feeds"].keys(), 1):
        embed.add_field(name=f"üì° Flux {i}", value=f"```{url}```", inline=False)

    # Ajouter des informations sur le filtrage
    if guild_id in server_keywords and server_keywords[guild_id]:
        keywords_str = ", ".join(server_keywords[guild_id][:5])
        if len(server_keywords[guild_id]) > 5:
            keywords_str += f" et {len(server_keywords[guild_id]) - 5} autres..."
        
        embed.add_field(name="üîç Filtrage actif", value=f"Mots-cl√©s: {keywords_str}", inline=False)
    else:
        embed.add_field(name="üîç Filtrage", value="Aucun (tous les articles sont publi√©s)", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name} ‚Ä¢ Utilisez !help pour plus d'options", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)

@bot.command(name="testrss")
async def test_rss(ctx, rss_url: str):
    """Teste un flux RSS configur√©"""
    try:
        feed = feedparser.parse(rss_url)
        if not feed.entries:
            await ctx.send("Aucune entr√©e trouv√©e dans le flux RSS.")
            return

        entry = feed.entries[0]
        
        # V√©rifier si l'article contient des mots-cl√©s (si configur√©s)
        guild_id = str(ctx.guild.id)
        keywords = server_keywords.get(guild_id, [])
        
        if keywords and not contains_keywords(entry, keywords):
            # Cr√©er un embed pour indiquer que l'article ne contient pas de mots-cl√©s
            embed = discord.Embed(
                title="‚ö†Ô∏è Test de filtrage",
                description=f"L'article ne contient aucun des mots-cl√©s configur√©s et ne serait pas publi√©.",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(name="üìù Titre de l'article", value=entry.title, inline=False)
            embed.add_field(name="üîç Mots-cl√©s configur√©s", value=", ".join(keywords[:10]) + 
                           ("..." if len(keywords) > 10 else ""), inline=False)
            
            embed.set_footer(text="Utilisez !setkeywords pour modifier les mots-cl√©s ou !clearkeywords pour les supprimer")
            
            await ctx.send(embed=embed)
            return
        
        # Obtenir la date de publication
        pub_date = parse_date(entry)
        
        # Obtenir le titre du flux
        feed_title = feed.feed.title if hasattr(feed.feed, 'title') else "Flux RSS"
        
        # Obtenir la description/r√©sum√©
        description = ""
        if hasattr(entry, 'summary'):
            description = clean_html(entry.summary)
        elif hasattr(entry, 'description'):
            description = clean_html(entry.description)
        
        # Limiter la longueur de la description
        if len(description) > 300:
            description = description[:300] + "..."
        
        # Cr√©er un embed moderne pour l'article
        embed = discord.Embed(
            title=entry.title,
            url=entry.link,
            description=description,
            color=get_color_for_url(rss_url),
            timestamp=pub_date
        )
        
        # Ajouter l'image du flux si disponible
        if hasattr(feed.feed, 'image') and hasattr(feed.feed.image, 'href'):
            embed.set_author(name=feed_title, url=feed.feed.link if hasattr(feed.feed, 'link') else None,
                            icon_url=feed.feed.image.href)
        else:
            embed.set_author(name=feed_title, url=feed.feed.link if hasattr(feed.feed, 'link') else None)
        
        # Ajouter l'image de l'article si disponible
        image_url = None
        
        # V√©rifier les m√©dias
        if hasattr(entry, 'media_content') and entry.media_content:
            for media in entry.media_content:
                if 'url' in media and media['url'].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                    image_url = media['url']
                    break
        
        # V√©rifier les enclosures
        if not image_url and hasattr(entry, 'enclosures') and entry.enclosures:
            for enclosure in entry.enclosures:
                if 'type' in enclosure and enclosure['type'].startswith('image/'):
                    image_url = enclosure['href']
                    break
        
        # V√©rifier les liens
        if not image_url and hasattr(entry, 'links'):
            for link in entry.links:
                if 'type' in link and link['type'].startswith('image/'):
                    image_url = link['href']
                    break
        
        if image_url:
            embed.set_image(url=image_url)
        
        # Ajouter l'auteur si disponible
        if hasattr(entry, 'author'):
            embed.add_field(name="‚úçÔ∏è Auteur", value=entry.author, inline=True)
        
        # Ajouter les cat√©gories si disponibles
        if hasattr(entry, 'tags'):
            categories = [tag.term for tag in entry.tags if hasattr(tag, 'term')]
            if categories:
                embed.add_field(name="üè∑Ô∏è Cat√©gories", value=", ".join(categories[:5]) + 
                               ("..." if len(categories) > 5 else ""), inline=True)
        
        # Ajouter un pied de page
        formatted_date = pub_date.strftime(DATE_FORMAT)
        embed.set_footer(text=f"Publi√© le {formatted_date} ‚Ä¢ Test de flux RSS")
        
        await ctx.send(embed=embed)
    except Exception as e:
        logger.error(f"Erreur lors du test RSS: {e}")
        await ctx.send(f"Erreur lors du test: {str(e)}")

@bot.command(name="setkeywords")
async def set_keywords(ctx, *keywords):
    """D√©finit les mots-cl√©s pour le filtrage des articles"""
    if not keywords:
        await ctx.send("Veuillez sp√©cifier au moins un mot-cl√©. Exemple: `!setkeywords mot1 \"phrase avec espaces\" mot3`")
        return

    guild_id = str(ctx.guild.id)
    server_keywords[guild_id] = list(keywords)
    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed pour la confirmation
    embed = discord.Embed(
        title="üîç Mots-cl√©s configur√©s",
        description="Les articles RSS seront filtr√©s selon ces mots-cl√©s.",
        color=discord.Color.green(),
        timestamp=datetime.now()
    )

    # Ajouter les mots-cl√©s
    keywords_str = "\n".join([f"‚Ä¢ {keyword}" for keyword in keywords])
    embed.add_field(name="üìù Liste des mots-cl√©s", value=keywords_str, inline=False)

    # Ajouter des informations
    embed.add_field(name="‚ÑπÔ∏è Information", value="Seuls les articles contenant au moins un de ces mots-cl√©s seront publi√©s.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Configur√© par {ctx.author.display_name} ‚Ä¢ Utilisez !clearkeywords pour d√©sactiver le filtrage", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Mots-cl√©s configur√©s pour le serveur {guild_id}: {keywords}")

@bot.command(name="addkeywords")
async def add_keywords(ctx, *keywords):
    """Ajoute des mots-cl√©s √† la liste existante"""
    if not keywords:
        await ctx.send("Veuillez sp√©cifier au moins un mot-cl√© √† ajouter.")
        return

    guild_id = str(ctx.guild.id)
    if guild_id not in server_keywords:
        server_keywords[guild_id] = []

    # Ajouter les nouveaux mots-cl√©s
    for keyword in keywords:
        if keyword not in server_keywords[guild_id]:
            server_keywords[guild_id].append(keyword)

    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed pour la confirmation
    embed = discord.Embed(
        title="‚ûï Mots-cl√©s ajout√©s",
        description="Les mots-cl√©s suivants ont √©t√© ajout√©s √† la liste de filtrage:",
        color=discord.Color.green(),
        timestamp=datetime.now()
    )

    # Ajouter les nouveaux mots-cl√©s
    keywords_str = "\n".join([f"‚Ä¢ {keyword}" for keyword in keywords])
    embed.add_field(name="üìù Nouveaux mots-cl√©s", value=keywords_str, inline=False)

    # Ajouter la liste compl√®te
    all_keywords_str = ", ".join(server_keywords[guild_id][:10])
    if len(server_keywords[guild_id]) > 10:
        all_keywords_str += f" et {len(server_keywords[guild_id]) - 10} autres..."

    embed.add_field(name="üîç Liste compl√®te", value=f"Il y a maintenant {len(server_keywords[guild_id])} mots-cl√©s configur√©s.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Modifi√© par {ctx.author.display_name} ‚Ä¢ Utilisez !listkeywords pour voir tous les mots-cl√©s", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Mots-cl√©s ajout√©s pour le serveur {guild_id}: {keywords}")

@bot.command(name="removekeywords")
async def remove_keywords(ctx, *keywords):
    """Supprime des mots-cl√©s de la liste"""
    if not keywords:
        await ctx.send("Veuillez sp√©cifier au moins un mot-cl√© √† supprimer.")
        return

    guild_id = str(ctx.guild.id)
    if guild_id not in server_keywords or not server_keywords[guild_id]:
        await ctx.send("Aucun mot-cl√© n'est configur√© pour ce serveur.")
        return

    # Supprimer les mots-cl√©s
    removed = []
    for keyword in keywords:
        if keyword in server_keywords[guild_id]:
            server_keywords[guild_id].remove(keyword)
            removed.append(keyword)

    if not removed:
        await ctx.send("Aucun des mots-cl√©s sp√©cifi√©s n'a √©t√© trouv√© dans la liste.")
        return

    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed pour la confirmation
    embed = discord.Embed(
        title="‚ûñ Mots-cl√©s supprim√©s",
        description="Les mots-cl√©s suivants ont √©t√© supprim√©s de la liste de filtrage:",
        color=discord.Color.orange(),
        timestamp=datetime.now()
    )

    # Ajouter les mots-cl√©s supprim√©s
    keywords_str = "\n".join([f"‚Ä¢ {keyword}" for keyword in removed])
    embed.add_field(name="üìù Mots-cl√©s supprim√©s", value=keywords_str, inline=False)

    # Ajouter la liste restante
    if server_keywords[guild_id]:
        all_keywords_str = ", ".join(server_keywords[guild_id][:10])
        if len(server_keywords[guild_id]) > 10:
            all_keywords_str += f" et {len(server_keywords[guild_id]) - 10} autres..."
        
        embed.add_field(name="üîç Liste restante", value=f"Il reste {len(server_keywords[guild_id])} mots-cl√©s configur√©s.", inline=False)
    else:
        embed.add_field(name="üîç Liste vide", value="Tous les mots-cl√©s ont √©t√© supprim√©s. Le filtrage est d√©sactiv√©.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Modifi√© par {ctx.author.display_name}", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Mots-cl√©s supprim√©s pour le serveur {guild_id}: {removed}")

@bot.command(name="clearkeywords")
async def clear_keywords(ctx):
    """Supprime tous les mots-cl√©s (d√©sactive le filtrage)"""
    guild_id = str(ctx.guild.id)
    if guild_id not in server_keywords or not server_keywords[guild_id]:
        await ctx.send("Aucun mot-cl√© n'est configur√© pour ce serveur.")
        return

    keyword_count = len(server_keywords[guild_id])
    server_keywords[guild_id] = []
    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed pour la confirmation
    embed = discord.Embed(
        title="üßπ Mots-cl√©s effac√©s",
        description=f"Tous les mots-cl√©s ({keyword_count}) ont √©t√© supprim√©s.",
        color=discord.Color.red(),
        timestamp=datetime.now()
    )

    embed.add_field(name="‚ÑπÔ∏è Information", value="Le filtrage est maintenant d√©sactiv√©. Tous les articles RSS seront publi√©s.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Modifi√© par {ctx.author.display_name} ‚Ä¢ Utilisez !setkeywords pour r√©activer le filtrage", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Tous les mots-cl√©s ont √©t√© supprim√©s pour le serveur {guild_id}")

@bot.command(name="listkeywords")
async def list_keywords(ctx):
    """Affiche la liste des mots-cl√©s configur√©s"""
    guild_id = str(ctx.guild.id)
    if guild_id not in server_keywords or not server_keywords[guild_id]:
        # Embed pour aucun mot-cl√© configur√©
        embed = discord.Embed(
            title="üîç Liste des mots-cl√©s",
            description="‚ö†Ô∏è Aucun mot-cl√© n'est configur√© pour ce serveur.",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        embed.add_field(name="‚ÑπÔ∏è Information", value="Le filtrage est d√©sactiv√©. Tous les articles RSS sont publi√©s.", inline=False)
        embed.add_field(name="üí° Conseil", value="Utilisez `!setkeywords mot1 mot2 ...` pour configurer des mots-cl√©s.", inline=False)
        
        embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", 
                         icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        
        await ctx.send(embed=embed)
        return

    # Cr√©er un embed pour la liste des mots-cl√©s
    embed = discord.Embed(
        title="üîç Liste des mots-cl√©s",
        description=f"{len(server_keywords[guild_id])} mots-cl√©s configur√©s pour le filtrage:",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )

    # Diviser les mots-cl√©s en plusieurs champs si n√©cessaire
    keywords = server_keywords[guild_id]
    chunk_size = 15  # Nombre de mots-cl√©s par champ

    for i in range(0, len(keywords), chunk_size):
        chunk = keywords[i:i+chunk_size]
        keywords_str = "\n".join([f"‚Ä¢ {keyword}" for keyword in chunk])
        embed.add_field(name=f"üìù Mots-cl√©s {i+1}-{i+len(chunk)}", value=keywords_str, inline=False)

    # Ajouter des informations
    embed.add_field(name="‚ÑπÔ∏è Information", value="Seuls les articles contenant au moins un de ces mots-cl√©s seront publi√©s.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name} ‚Ä¢ Utilisez !help pour plus d'options", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Liste des mots-cl√©s affich√©e pour le serveur {guild_id}")

@bot.command(name="resetkeywords")
async def reset_keywords(ctx):
    """R√©initialise les mots-cl√©s avec la liste par d√©faut"""
    guild_id = str(ctx.guild.id)
    server_keywords[guild_id] = DEFAULT_KEYWORDS.copy()
    save_config()  # Sauvegarder la configuration

    # Cr√©er un embed pour la confirmation
    embed = discord.Embed(
        title="üîÑ Mots-cl√©s r√©initialis√©s",
        description=f"Les mots-cl√©s ont √©t√© r√©initialis√©s avec la liste par d√©faut ({len(DEFAULT_KEYWORDS)} mots-cl√©s).",
        color=discord.Color.purple(),
        timestamp=datetime.now()
    )

    # Ajouter quelques exemples de mots-cl√©s
    examples = ", ".join(DEFAULT_KEYWORDS[:10])
    if len(DEFAULT_KEYWORDS) > 10:
        examples += f" et {len(DEFAULT_KEYWORDS) - 10} autres..."

    embed.add_field(name="üìù Exemples", value=examples, inline=False)
    embed.add_field(name="‚ÑπÔ∏è Information", value="Utilisez `!listkeywords` pour voir la liste compl√®te.", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"R√©initialis√© par {ctx.author.display_name}", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)
    logger.info(f"Mots-cl√©s r√©initialis√©s pour le serveur {guild_id}")

@bot.command(name="help")
async def help_command(ctx):
    """Affiche l'aide pour les commandes RSS"""
    embed = discord.Embed(
        title="üìö Guide du Bot RSS",
        description="Voici les commandes disponibles pour g√©rer vos flux RSS et le filtrage par mots-cl√©s.",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )

    # Commandes de base
    embed.add_field(name="üì° Gestion des flux RSS", value="""
`!addrss #canal URL` - Ajoute un flux RSS √† surveiller
`!removerss URL` - Supprime un flux RSS
`!listrss` - Liste tous les flux RSS configur√©s
`!testrss URL` - Teste un flux RSS
`!checkrss` - Force une v√©rification imm√©diate des flux RSS
""", inline=False)

    # Commandes de filtrage
    embed.add_field(name="üîç Filtrage par mots-cl√©s", value="""
`!setkeywords mot1 "phrase avec espaces" mot3` - D√©finit les mots-cl√©s (remplace les existants)
`!addkeywords mot1 mot2` - Ajoute des mots-cl√©s √† la liste existante
`!removekeywords mot1 mot2` - Supprime des mots-cl√©s sp√©cifiques
`!clearkeywords` - Supprime tous les mots-cl√©s (d√©sactive le filtrage)
`!listkeywords` - Affiche la liste des mots-cl√©s configur√©s
`!resetkeywords` - R√©initialise avec la liste de mots-cl√©s par d√©faut
""", inline=False)

    # Exemples
    embed.add_field(name="üí° Exemples", value="""
`!addrss #actualit√©s https://www.lemonde.fr/rss/une.xml`
`!setkeywords IA "intelligence artificielle" sant√© m√©decine`
`!testrss https://www.lemonde.fr/rss/une.xml`
`!checkrss` - V√©rifie imm√©diatement tous les flux
""", inline=False)

    # Informations sur le filtrage
    embed.add_field(name="‚ÑπÔ∏è √Ä propos du filtrage", value="""
Lorsque des mots-cl√©s sont configur√©s, seuls les articles contenant au moins un de ces mots-cl√©s seront publi√©s.
Le filtrage s'applique au titre, √† la description et au contenu des articles.
Si aucun mot-cl√© n'est configur√©, tous les articles seront publi√©s.
""", inline=False)

    # Informations sur la fr√©quence de v√©rification
    embed.add_field(name="‚è±Ô∏è Fr√©quence de v√©rification", value="""
Le bot v√©rifie les flux RSS **toutes les 5 minutes** par d√©faut.
Utilisez `!checkrss` pour forcer une v√©rification imm√©diate.
""", inline=False)

    # Ajouter un pied de page
    embed.set_footer(text=f"Demand√© par {ctx.author.display_name} ‚Ä¢ Bot RSS v2.0", 
                     icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

    await ctx.send(embed=embed)

# Commande pour forcer la v√©rification des flux RSS
@bot.command(name="checkrss")
@commands.has_permissions(manage_messages=True)  # Limite aux mod√©rateurs
async def force_check_rss(ctx):
    """Force une v√©rification imm√©diate des flux RSS"""
    await ctx.send("‚è≥ V√©rification forc√©e des flux RSS en cours...")
    
    # Cr√©er une t√¢che asynchrone pour la v√©rification
    asyncio.create_task(check_rss_once(ctx))
    
    logger.info(f"V√©rification forc√©e des flux RSS demand√©e par {ctx.author}")

# Fonction pour v√©rifier les flux RSS une seule fois
async def check_rss_once(ctx):
    """V√©rifie les flux RSS une seule fois et envoie un rapport"""
    try:
        logger.info("V√©rification forc√©e des flux RSS...")
        new_articles_count = 0
        checked_feeds = 0
        
        for guild_id, config in list(rss_configs.items()):
            channel = bot.get_channel(config["channel"])
            if not channel:
                logger.warning(f"Channel introuvable pour guild {guild_id}")
                continue

            # Obtenir les mots-cl√©s pour ce serveur
            keywords = server_keywords.get(guild_id, [])
            
            for rss_url, last_id in list(config["feeds"].items()):
                try:
                    logger.info(f"V√©rification du flux: {rss_url}")
                    feed = feedparser.parse(rss_url)
                    checked_feeds += 1
                    
                    if not feed.entries:
                        logger.warning(f"Aucune entr√©e dans le flux: {rss_url}")
                        continue

                    # Initialiser last_id si c'est la premi√®re v√©rification
                    if last_id is None:
                        entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
                        rss_configs[guild_id]["feeds"][rss_url] = entry_id
                        save_config()  # Sauvegarder la configuration
                        logger.info(f"Premier ID enregistr√© pour {rss_url}: {entry_id}")
                        continue

                    # Trouver les nouvelles entr√©es
                    new_entries = []
                    for entry in feed.entries:
                        entry_id = getattr(entry, 'id', None) or getattr(entry, 'link', None)
                        if entry_id == last_id:
                            break
                        new_entries.append(entry)
                    
                    # Obtenir le titre du flux
                    feed_title = feed.feed.title if hasattr(feed.feed, 'title') else "Flux RSS"
                    
                    # Obtenir une couleur pour ce flux
                    color = get_color_for_url(rss_url)
                    
                    # Obtenir l'ic√¥ne du flux
                    feed_icon = None
                    if hasattr(feed.feed, 'image') and hasattr(feed.feed.image, 'href'):
                        feed_icon = feed.feed.image.href
                    
                    # Envoyer les nouvelles entr√©es
                    for entry in reversed(new_entries):  # Envoyer dans l'ordre chronologique
                        try:
                            # V√©rifier si l'article contient des mots-cl√©s (si configur√©s)
                            if keywords and not contains_keywords(entry, keywords):
                                logger.info(f"Article filtr√© (ne contient pas de mots-cl√©s): {entry.title}")
                                continue
                            
                            # Obtenir la date de publication
                            pub_date = parse_date(entry)
                            
                            # Obtenir la description/r√©sum√©
                            description = ""
                            if hasattr(entry, 'summary'):
                                description = clean_html(entry.summary)
                            elif hasattr(entry, 'description'):
                                description = clean_html(entry.description)
                            
                            # Limiter la longueur de la description
                            if len(description) > 300:
                                description = description[:300] + "..."
                            
                            # Cr√©er un embed moderne pour l'article
                            embed = discord.Embed(
                                title=entry.title,
                                url=entry.link,
                                description=description,
                                color=color,
                                timestamp=pub_date
                            )
                            
                            # Ajouter l'auteur avec l'ic√¥ne du flux
                            if feed_icon:
                                embed.set_author(name=feed_title, 
                                                url=feed.feed.link if hasattr(feed.feed, 'link') else None,
                                                icon_url=feed_icon)
                            else:
                                embed.set_author(name=feed_title, 
                                                url=feed.feed.link if hasattr(feed.feed, 'link') else None)
                            
                            # Ajouter l'image de l'article si disponible
                            image_url = None
                            
                            # V√©rifier les m√©dias
                            if hasattr(entry, 'media_content') and entry.media_content:
                                for media in entry.media_content:
                                    if 'url' in media and media['url'].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                                        image_url = media['url']
                                        break
                            
                            # V√©rifier les enclosures
                            if not image_url and hasattr(entry, 'enclosures') and entry.enclosures:
                                for enclosure in entry.enclosures:
                                    if 'type' in enclosure and enclosure['type'].startswith('image/'):
                                        image_url = enclosure['href']
                                        break
                            
                            # V√©rifier les liens
                            if not image_url and hasattr(entry, 'links'):
                                for link in entry.links:
                                    if 'type' in link and link['type'].startswith('image/'):
                                        image_url = link['href']
                                        break
                            
                            if image_url:
                                embed.set_image(url=image_url)
                            
                            # Ajouter l'auteur si disponible
                            if hasattr(entry, 'author'):
                                embed.add_field(name="‚úçÔ∏è Auteur", value=entry.author, inline=True)
                            
                            # Ajouter les cat√©gories si disponibles
                            if hasattr(entry, 'tags'):
                                categories = [tag.term for tag in entry.tags if hasattr(tag, 'term')]
                                if categories:
                                    embed.add_field(name="üè∑Ô∏è Cat√©gories", value=", ".join(categories[:5]) + 
                                                  ("..." if len(categories) > 5 else ""), inline=True)
                            
                            # Ajouter un pied de page
                            formatted_date = pub_date.strftime(DATE_FORMAT)
                            embed.set_footer(text=f"Publi√© le {formatted_date}")
                            
                            await channel.send(embed=embed)
                            new_articles_count += 1
                            logger.info(f"Nouvel article envoy√©: {entry.title}")
                        except Exception as e:
                            logger.error(f"Erreur lors de l'envoi d'un article: {e}")

                    # Mettre √† jour le dernier ID
                    if feed.entries:
                        entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
                        rss_configs[guild_id]["feeds"][rss_url] = entry_id
                        save_config()  # Sauvegarder la configuration
                        logger.info(f"ID mis √† jour pour {rss_url}: {entry_id}")
                
                except Exception as e:
                    logger.error(f"Erreur pour le flux {rss_url}: {e}")
                
                # Pause entre chaque flux pour √©viter de surcharger
                await asyncio.sleep(1)  # Pause plus courte pour la v√©rification forc√©e

        # Envoyer un rapport de la v√©rification
        embed = discord.Embed(
            title="‚úÖ V√©rification RSS termin√©e",
            description=f"V√©rification forc√©e des flux RSS termin√©e.",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(name="üìä R√©sultats", value=f"""
‚Ä¢ Flux v√©rifi√©s: **{checked_feeds}**
‚Ä¢ Nouveaux articles publi√©s: **{new_articles_count}**
        """, inline=False)
        
        embed.set_footer(text=f"Demand√© par {ctx.author.display_name}", 
                         icon_url=ctx.author.avatar.url if ctx.author.avatar else None)
        
        await ctx.send(embed=embed)
        logger.info(f"V√©rification forc√©e termin√©e. {new_articles_count} nouveaux articles publi√©s.")

    except Exception as e:
        logger.error(f"Erreur dans la v√©rification forc√©e: {e}")
        await ctx.send(f"‚ùå Erreur lors de la v√©rification forc√©e: {str(e)}")

# ===== COMMANDES SLASH (/) =====
# Ces commandes sont d√©finies mais ne seront utilis√©es que si elles fonctionnent

# Commande slash pour ajouter un flux RSS
@bot.tree.command(name="addrss", description="Ajoute un flux RSS √† surveiller")
@app_commands.describe(
    channel="Le canal o√π les articles seront publi√©s",
    rss_url="L'URL du flux RSS √† surveiller"
)
async def slash_add_rss(interaction: discord.Interaction, channel: discord.TextChannel, rss_url: str):
    try:
        await interaction.response.defer(ephemeral=False)
        
        feed = feedparser.parse(rss_url)
        if feed.bozo and not feed.entries:
            await interaction.followup.send("URL RSS invalide ou inaccessible !")
            return
        
        guild_id = str(interaction.guild_id)
        if guild_id not in rss_configs:
            rss_configs[guild_id] = {"channel": channel.id, "feeds": {}}
        elif rss_configs[guild_id]["channel"] != channel.id:
            rss_configs[guild_id]["channel"] = channel.id
        
        # Stocker l'ID du dernier article
        last_entry_id = None
        if feed.entries:
            last_entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
        
        rss_configs[guild_id]["feeds"][rss_url] = last_entry_id
        save_config()  # Sauvegarder la configuration
        
        # Obtenir le titre du flux
        feed_title = feed.feed.title if hasattr(feed.feed, 'title') else "Flux RSS"
        
        # Cr√©er un embed moderne pour la confirmation
        embed = discord.Embed(
            title="‚úÖ Flux RSS ajout√© avec succ√®s",
            description=f"Le flux **{feed_title}** sera surveill√© pour les nouveaux articles.",
            color=get_color_for_url(rss_url),
            timestamp=datetime.now()
        )
        
        # Ajouter une image si disponible
        if hasattr(feed.feed, 'image') and hasattr(feed.feed.image, 'href'):
            embed.set_thumbnail(url=feed.feed.image.href)
        
        embed.add_field(name="üì° URL du flux", value=f"```{rss_url}```", inline=False)
        embed.add_field(name="üì¢ Canal de publication", value=channel.mention, inline=True)
        
        # Ajouter des informations sur le filtrage
        guild_id_str = str(interaction.guild_id)
        if guild_id_str in server_keywords and server_keywords[guild_id_str]:
            keyword_count = len(server_keywords[guild_id_str])
            embed.add_field(name="üîç Filtrage actif", value=f"{keyword_count} mots-cl√©s configur√©s", inline=True)
        else:
            embed.add_field(name="üîç Filtrage", value="Aucun (tous les articles seront publi√©s)", inline=True)
        
        # Ajouter un pied de page avec des instructions
        embed.set_footer(text=f"Ajout√© par {interaction.user.display_name} ‚Ä¢ Utilisez /help pour plus d'options", 
                         icon_url=interaction.user.avatar.url if interaction.user.avatar else None)
        
        await interaction.followup.send(embed=embed)
        logger.info(f"Flux RSS ajout√©: {rss_url} pour le serveur {guild_id}")
    except Exception as e:
        logger.error(f"Erreur lors de l'ajout du flux RSS: {e}")
        await interaction.followup.send(f"Erreur: {str(e)}")

# Commande slash pour l'aide
@bot.tree.command(name="help", description="Affiche l'aide pour les commandes RSS")
async def slash_help(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=False)
    
    embed = discord.Embed(
        title="üìö Guide du Bot RSS",
        description="Voici les commandes disponibles pour g√©rer vos flux RSS et le filtrage par mots-cl√©s.",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    # Commandes de base
    embed.add_field(name="üì° Gestion des flux RSS", value="""
`!addrss #canal URL` - Ajoute un flux RSS √† surveiller
`!removerss URL` - Supprime un flux RSS
`!listrss` - Liste tous les flux RSS configur√©s
`!testrss URL` - Teste un flux RSS
`!checkrss` - Force une v√©rification imm√©diate des flux RSS
""", inline=False)
    
    # Commandes de filtrage
    embed.add_field(name="üîç Filtrage par mots-cl√©s", value="""
`!setkeywords mot1 "phrase avec espaces" mot3` - D√©finit les mots-cl√©s (remplace les existants)
`!addkeywords mot1 mot2` - Ajoute des mots-cl√©s √† la liste existante
`!removekeywords mot1 mot2` - Supprime des mots-cl√©s sp√©cifiques
`!clearkeywords` - Supprime tous les mots-cl√©s (d√©sactive le filtrage)
`!listkeywords` - Affiche la liste des mots-cl√©s configur√©s
`!resetkeywords` - R√©initialise avec la liste de mots-cl√©s par d√©faut
""", inline=False)
    
    # Informations sur le filtrage
    embed.add_field(name="‚ÑπÔ∏è √Ä propos du filtrage", value="""
Lorsque des mots-cl√©s sont configur√©s, seuls les articles contenant au moins un de ces mots-cl√©s seront publi√©s.
Le filtrage s'applique au titre, √† la description et au contenu des articles.
Si aucun mot-cl√© n'est configur√©, tous les articles seront publi√©s.
""", inline=False)
    
    # Informations sur la fr√©quence de v√©rification
    embed.add_field(name="‚è±Ô∏è Fr√©quence de v√©rification", value="""
Le bot v√©rifie les flux RSS **toutes les 5 minutes** par d√©faut.
Utilisez `!checkrss` pour forcer une v√©rification imm√©diate.
""", inline=False)
    
    # Ajouter un pied de page
    embed.set_footer(text=f"Demand√© par {interaction.user.display_name} ‚Ä¢ Bot RSS v2.0", 
                     icon_url=interaction.user.avatar.url if interaction.user.avatar else None)
    
    await interaction.followup.send(embed=embed)

# Commande slash pour forcer la v√©rification des flux RSS
@bot.tree.command(name="checkrss", description="Force une v√©rification imm√©diate des flux RSS")
async def slash_force_check_rss(interaction: discord.Interaction):
    # V√©rifier les permissions
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message("‚ùå Vous n'avez pas les permissions n√©cessaires pour utiliser cette commande.", ephemeral=True)
        return
    
    await interaction.response.send_message("‚è≥ V√©rification forc√©e des flux RSS en cours...")
    
    # Cr√©er un contexte simul√© pour la fonction check_rss_once
    class SimulatedContext:
        def __init__(self, interaction):
            self.author = interaction.user
            self.send = interaction.followup.send
    
    # Cr√©er une t√¢che asynchrone pour la v√©rification
    asyncio.create_task(check_rss_once(SimulatedContext(interaction)))
    
    logger.info(f"V√©rification forc√©e des flux RSS demand√©e par {interaction.user}")

@tasks.loop(minutes=5)
async def check_rss():
    """V√©rifie p√©riodiquement les flux RSS pour de nouveaux articles"""
    try:
        logger.info("V√©rification des flux RSS...")
        
        for guild_id, config in list(rss_configs.items()):
            channel = bot.get_channel(config["channel"])
            if not channel:
                logger.warning(f"Channel introuvable pour guild {guild_id}")
                continue

            # Obtenir les mots-cl√©s pour ce serveur
            keywords = server_keywords.get(guild_id, [])
            
            for rss_url, last_id in list(config["feeds"].items()):
                try:
                    logger.info(f"V√©rification du flux: {rss_url}")
                    feed = feedparser.parse(rss_url)
                    
                    if not feed.entries:
                        logger.warning(f"Aucune entr√©e dans le flux: {rss_url}")
                        continue

                    # Initialiser last_id si c'est la premi√®re v√©rification
                    if last_id is None:
                        entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
                        rss_configs[guild_id]["feeds"][rss_url] = entry_id
                        save_config()  # Sauvegarder la configuration
                        logger.info(f"Premier ID enregistr√© pour {rss_url}: {entry_id}")
                        continue

                    # Trouver les nouvelles entr√©es
                    new_entries = []
                    for entry in feed.entries:
                        entry_id = getattr(entry, 'id', None) or getattr(entry, 'link', None)
                        if entry_id == last_id:
                            break
                        new_entries.append(entry)
                    
                    # Obtenir le titre du flux
                    feed_title = feed.feed.title if hasattr(feed.feed, 'title') else "Flux RSS"
                    
                    # Obtenir une couleur pour ce flux
                    color = get_color_for_url(rss_url)
                    
                    # Obtenir l'ic√¥ne du flux
                    feed_icon = None
                    if hasattr(feed.feed, 'image') and hasattr(feed.feed.image, 'href'):
                        feed_icon = feed.feed.image.href
                    
                    # Envoyer les nouvelles entr√©es
                    for entry in reversed(new_entries):  # Envoyer dans l'ordre chronologique
                        try:
                            # V√©rifier si l'article contient des mots-cl√©s (si configur√©s)
                            if keywords and not contains_keywords(entry, keywords):
                                logger.info(f"Article filtr√© (ne contient pas de mots-cl√©s): {entry.title}")
                                continue
                            
                            # Obtenir la date de publication
                            pub_date = parse_date(entry)
                            
                            # Obtenir la description/r√©sum√©
                            description = ""
                            if hasattr(entry, 'summary'):
                                description = clean_html(entry.summary)
                            elif hasattr(entry, 'description'):
                                description = clean_html(entry.description)
                            
                            # Limiter la longueur de la description
                            if len(description) > 300:
                                description = description[:300] + "..."
                            
                            # Cr√©er un embed moderne pour l'article
                            embed = discord.Embed(
                                title=entry.title,
                                url=entry.link,
                                description=description,
                                color=color,
                                timestamp=pub_date
                            )
                            
                            # Ajouter l'auteur avec l'ic√¥ne du flux
                            if feed_icon:
                                embed.set_author(name=feed_title, 
                                                url=feed.feed.link if hasattr(feed.feed, 'link') else None,
                                                icon_url=feed_icon)
                            else:
                                embed.set_author(name=feed_title, 
                                                url=feed.feed.link if hasattr(feed.feed, 'link') else None)
                            
                            # Ajouter l'image de l'article si disponible
                            image_url = None
                            
                            # V√©rifier les m√©dias
                            if hasattr(entry, 'media_content') and entry.media_content:
                                for media in entry.media_content:
                                    if 'url' in media and media['url'].endswith(('.jpg', '.jpeg', '.png', '.gif')):
                                        image_url = media['url']
                                        break
                            
                            # V√©rifier les enclosures
                            if not image_url and hasattr(entry, 'enclosures') and entry.enclosures:
                                for enclosure in entry.enclosures:
                                    if 'type' in enclosure and enclosure['type'].startswith('image/'):
                                        image_url = enclosure['href']
                                        break
                            
                            # V√©rifier les liens
                            if not image_url and hasattr(entry, 'links'):
                                for link in entry.links:
                                    if 'type' in link and link['type'].startswith('image/'):
                                        image_url = link['href']
                                        break
                            
                            if image_url:
                                embed.set_image(url=image_url)
                            
                            # Ajouter l'auteur si disponible
                            if hasattr(entry, 'author'):
                                embed.add_field(name="‚úçÔ∏è Auteur", value=entry.author, inline=True)
                            
                            # Ajouter les cat√©gories si disponibles
                            if hasattr(entry, 'tags'):
                                categories = [tag.term for tag in entry.tags if hasattr(tag, 'term')]
                                if categories:
                                    embed.add_field(name="üè∑Ô∏è Cat√©gories", value=", ".join(categories[:5]) + 
                                                  ("..." if len(categories) > 5 else ""), inline=True)
                            
                            # Ajouter un pied de page
                            formatted_date = pub_date.strftime(DATE_FORMAT)
                            embed.set_footer(text=f"Publi√© le {formatted_date}")
                            
                            await channel.send(embed=embed)
                            logger.info(f"Nouvel article envoy√©: {entry.title}")
                        except Exception as e:
                            logger.error(f"Erreur lors de l'envoi d'un article: {e}")

                    # Mettre √† jour le dernier ID
                    if feed.entries:
                        entry_id = getattr(feed.entries[0], 'id', None) or getattr(feed.entries[0], 'link', None)
                        rss_configs[guild_id]["feeds"][rss_url] = entry_id
                        save_config()  # Sauvegarder la configuration
                        logger.info(f"ID mis √† jour pour {rss_url}: {entry_id}")
                
                except Exception as e:
                    logger.error(f"Erreur pour le flux {rss_url}: {e}")
                
                # Pause entre chaque flux pour √©viter de surcharger
                await asyncio.sleep(2)

        logger.info("Cycle de v√©rification termin√©")

    except Exception as e:
        logger.error(f"Erreur dans check_rss: {e}")

@check_rss.before_loop
async def before_check_rss():
    """Attend que le bot soit pr√™t avant de d√©marrer la t√¢che"""
    await bot.wait_until_ready()

# Remplacez par votre token
TOKEN = "MTM0NjQ5MjgxMDA5Nzg1MjQ3OA.Gux0S5.hajy49Ip9Q3hV_9bPXzCHSLCm_RRzeNY_bN0XI"  # Remplacez par votre vrai token

# D√©marrer le bot
if __name__ == "__main__":
    bot.run(TOKEN)